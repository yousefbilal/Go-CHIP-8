package main

import (
	"io"
	"os"
)

var chip8_fontset [80]byte = [80]byte{
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80, // F
}

type Memory struct {
	memory [4096]byte
	stack  [16]uint16
}

func (m *Memory) ReadOpcode(PC uint16) uint16 {
	return uint16(m.memory[PC])<<8 | uint16(m.memory[PC+1])
}

func NewMemory(fileName string) *Memory {
	mem := Memory{}

	//load fontset
	for i := 0; i < 80; i++ {
		mem.memory[i] = chip8_fontset[i]
	}

	buffer := loadFile(fileName)
	// 512 == 0x200 (offset of the program in memory)
	for i := range buffer {
		mem.memory[i + 512] = buffer[i]
	} 
	return &mem
}

func loadFile(fileName string) []byte {
	f, err := os.Open(fileName)
	if err != nil {
		panic(err)
	}
	defer f.Close()
	buffer, err := io.ReadAll(f)
	if err != nil {
		panic(err)
	}
	return buffer
}